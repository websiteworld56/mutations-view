{"config": {"Build Date": "20 Jan 2022", "Commit": "ab159cd", "LLVM Version": "12.0.0", "Mull Version": "0.15.0", "URL": "https://github.com/mull-project/mull"}, "files": {"/__w/mull-lab/mull-lab/programs/vim/ccfilter.c": {"language": "cpp", "mutants": [{"id": "cxx_lt_to_ge", "location": {"end": {"column": 16, "line": 96}, "start": {"column": 15, "line": 96}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 16, "line": 96}, "start": {"column": 15, "line": 96}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 34, "line": 96}, "start": {"column": 32, "line": 96}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 12, "line": 106}, "start": {"column": 10, "line": 106}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 25, "line": 106}, "start": {"column": 23, "line": 106}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 15, "line": 127}, "start": {"column": 14, "line": 127}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Killed"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 15, "line": 127}, "start": {"column": 14, "line": 127}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Killed"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 24, "line": 127}, "start": {"column": 22, "line": 127}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 24, "line": 129}, "start": {"column": 22, "line": 129}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 23, "line": 147}, "start": {"column": 22, "line": 147}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Survived"}, {"id": "cxx_ge_to_gt", "location": {"end": {"column": 27, "line": 147}, "start": {"column": 25, "line": 147}}, "mutatorName": "Replaced >= with >", "replacement": ">", "status": "Survived"}, {"id": "cxx_ge_to_lt", "location": {"end": {"column": 27, "line": 147}, "start": {"column": 25, "line": 147}}, "mutatorName": "Replaced >= with <", "replacement": "<", "status": "Survived"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 20, "line": 149}, "start": {"column": 18, "line": 149}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Survived"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 29, "line": 151}, "start": {"column": 28, "line": 151}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 29, "line": 151}, "start": {"column": 28, "line": 151}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 46, "line": 151}, "start": {"column": 44, "line": 151}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 68, "line": 152}, "start": {"column": 66, "line": 152}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 43, "line": 153}, "start": {"column": 41, "line": 153}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 74, "line": 154}, "start": {"column": 72, "line": 154}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 32, "line": 156}, "start": {"column": 30, "line": 156}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 18, "line": 166}, "start": {"column": 16, "line": 166}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 39, "line": 169}, "start": {"column": 37, "line": 169}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 63, "line": 195}, "start": {"column": 61, "line": 195}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 29, "line": 201}, "start": {"column": 27, "line": 201}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 25, "line": 208}, "start": {"column": 23, "line": 208}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 25, "line": 213}, "start": {"column": 23, "line": 213}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 25, "line": 220}, "start": {"column": 23, "line": 220}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 23, "line": 221}, "start": {"column": 21, "line": 221}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 29, "line": 226}, "start": {"column": 27, "line": 226}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 25, "line": 233}, "start": {"column": 23, "line": 233}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 22, "line": 235}, "start": {"column": 20, "line": 235}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 29, "line": 238}, "start": {"column": 27, "line": 238}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 22, "line": 241}, "start": {"column": 20, "line": 241}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 29, "line": 244}, "start": {"column": 27, "line": 244}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 45, "line": 248}, "start": {"column": 43, "line": 248}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 41, "line": 249}, "start": {"column": 39, "line": 249}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 49, "line": 254}, "start": {"column": 47, "line": 254}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 25, "line": 268}, "start": {"column": 23, "line": 268}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 30, "line": 275}, "start": {"column": 28, "line": 275}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 33, "line": 278}, "start": {"column": 31, "line": 278}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 52, "line": 283}, "start": {"column": 50, "line": 283}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 35, "line": 284}, "start": {"column": 33, "line": 284}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 55, "line": 285}, "start": {"column": 53, "line": 285}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 39, "line": 286}, "start": {"column": 37, "line": 286}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 41, "line": 287}, "start": {"column": 39, "line": 287}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 62, "line": 287}, "start": {"column": 60, "line": 287}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_sub_to_add", "location": {"end": {"column": 45, "line": 288}, "start": {"column": 44, "line": 288}}, "mutatorName": "Replaced - with +", "replacement": "+", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 26, "line": 303}, "start": {"column": 24, "line": 303}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 35, "line": 315}, "start": {"column": 33, "line": 315}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_add_to_sub", "location": {"end": {"column": 63, "line": 319}, "start": {"column": 62, "line": 319}}, "mutatorName": "Replaced + with -", "replacement": "-", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 41, "line": 323}, "start": {"column": 39, "line": 323}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}], "source": "/* ======================================================================= */\n/*  Project : VIM                                                          */\n/*  Module  : ccfilter                              Version: 02.01.01      */\n/*  File    : ccfilter.c                                                   */\n/*  Purpose : Filter gmake/cc output into a standardized form              */\n/* ======================================================================= */\n/*         Created On: 12-Sep-95 20:32                                     */\n/*  Last modification: 03-Feb-98                                           */\n/*  -e option added by Bernd Feige                                         */\n/* ======================================================================= */\n/*  Copyright :                                                            */\n/*     This source file is copyright (c) to Pablo Ariel Kohan              */\n/* ======================================================================= */\n#define __CCFILTER_C__\n\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n\n#define LINELENGTH 2048\n\n/* Collector(s) */\nchar           Line[LINELENGTH];\nchar           Line2[LINELENGTH];\n/* Components */\nchar           FileName[1024];\nchar           BasePath[1024];\nchar           CWD[1024];\nunsigned long  Row; \nunsigned long  Col; \nchar           Severity;\nchar           Reason[LINELENGTH];\n\n#define COMPILER_UNKNOWN    0\n#define COMPILER_GCC        1\n#define COMPILER_AIX        2\n#define COMPILER_ATT        3\n#define COMPILER_IRIX       4\n#define COMPILER_SOLARIS    5\n#define COMPILER_HPUX       6\n\nchar    *COMPILER_Names[][2] =\n    {\n      /* Name            Description */\n      { \"N/A\",          \"\"                                              },\n      { \"GCC\",          \"GCC compiler\"                                  },\n      { \"AIX\",          \"AIX's C compiler\"                              },\n      { \"ATT\",          \"AT&T/NCR's High Performance C Compiler\"        },\n      { \"IRIX\",         \"IRIX's MIPS/MIPSpro C compiler\"                },\n      { \"SOLARIS\",      \"SOLARIS's SparcWorks C compiler\"               },\n      { \"HPUX\",         \"HPUX's C compiler\"                             }\n    };\n#define COMPILER_QTY (sizeof(COMPILER_Names)/sizeof(COMPILER_Names[0]))\n\n#if   defined(_GCC)\n#                       define COMPILER_DEFAULT COMPILER_GCC\n#elif defined(_AIX)\n#                       define COMPILER_DEFAULT COMPILER_AIX\n#elif defined(_ATT)\n#                       define COMPILER_DEFAULT COMPILER_ATT\n#elif defined(_IRIX)\n#                       define COMPILER_DEFAULT COMPILER_IRIX\n#elif defined(_SOLARIS)\n#                       define COMPILER_DEFAULT COMPILER_SOLARIS\n#elif defined(_HPUX)\n#                       define COMPILER_DEFAULT COMPILER_HPUX\n#else\n#                       define COMPILER_DEFAULT COMPILER_UNKNOWN\n#endif\n\nconst char USAGE[] =\n\"ccfilter  v2.1              (c)1994-1997 by Pablo Ariel Kohan\\n\"\n\"Filter Out compiler's output, and converts it to fit VIM\\n\\n\"\n\"Usage:\\n\"\n\"  ccfilter [<options>]\\n\"\n\"Where: <options> is one or more of:\\n\"\n\"  -c              Decrement column by one\\n\"\n\"  -r              Decrement row by one\\n\"\n\"  -e              Echo stdin to stderr\\n\"\n\"  -v              Verbose (Outputs also invalid lines)\\n\"\n\"  -o <COMPILER>   Treat input as <COMPILER>'s output\\n\"\n\"                  Note: COMPILER may be preceded by an _\\n\"\n\"  -h              This usage.\\n\";\n\n\nint ShowUsage( char *szError )\n{ int i;\n\n  fprintf( stderr, USAGE );\n\n  fprintf( stderr, \"Current default <COMPILER>: %s\\n\",\n                   COMPILER_Names[COMPILER_DEFAULT][0] );\n\n  fprintf( stderr, \"Acceptable parameters for <COMPILER> are:\\n\" );\n  for (i=1; i < COMPILER_QTY; i++)\n      fprintf( stderr, \"     %-15.15s     %s\\n\",\n                       COMPILER_Names[i][0],\n                       COMPILER_Names[i][1] );\n  fprintf(stderr, szError);\n  return 0;\n}\n\nchar *echogets(char *s, int echo) {\n char * const retval=fgets(s, LINELENGTH, stdin);\n if (echo!=0 && retval!=NULL) {\n  fputs(retval, stderr);\n }\n return retval;\n}\n\nint main( int argc, char *argv[] )\n{ int   rv, i, j, ok;\n  int   stay;\n  int   prefetch;\n  char *p;\n  int   dec_col = 0; /* Decrement column value by 1 */\n  int   dec_row = 0; /* Decrement row    value by 1 */\n  int   echo = 0;    /* Echo stdin to stderr */\n  int   verbose = 0; /* Include Bad Formatted Lines */\n  int   CWDlen;\n  int   COMPILER = COMPILER_DEFAULT;\n\n  getcwd( CWD, sizeof(CWD) );\n  CWDlen = strlen(CWD);\n\n  for (i=1; i<argc; i++)\n    {\n      if (argv[i][0] != '-')\n        return ShowUsage(\"\");\n      switch ( argv[i][1] )\n        {\n          case 'c':\n            dec_col = 1;\n            break;\n          case 'r':\n            dec_row = 1;\n            break;\n          case 'e':\n            echo = 1;\n            break;\n          case 'v':\n            verbose = 1;\n            break;\n          case 'o':\n              {\n                if (i+1 >= argc)\n                    return ShowUsage(\"Error: Missing parameter for -o\\n\");\n                i++;\n                COMPILER = -1;\n                for (j=1; j<COMPILER_QTY; j++)\n                    if (  (strcmp(argv[i], COMPILER_Names[j][0]) == 0) ||\n                          ( (argv[i][0] == '_') &&\n                            (strcmp(&argv[i][1], COMPILER_Names[j][0]) == 0) )  )\n                        COMPILER = j;\n                if (COMPILER == -1)\n                    return ShowUsage(\"Error: Invalid COMPILER specified\\n\");\n              }\n            break;\n          case 'h':\n            return ShowUsage(\"\");\n          default:\n            return ShowUsage(\"Error: Invalid option\\n\");\n        }\n    }\n  if (COMPILER == 0)\n      return ShowUsage(\"Error: COMPILER must be specified in this system\\n\");\n\n  stay     = ( echogets(Line, echo) != NULL );\n  prefetch = 0;\n\n  while( stay )\n    {\n      *FileName = 0;\n      Row       = 0;\n      Col       = 0;\n      Severity  = ' ';\n      *Reason   = 0;\n      ok        = 0;\n      switch (COMPILER)\n        {\n          case COMPILER_GCC:\n            Severity = 'e';\n#ifdef GOTO_FROM_WHERE_INCLUDED\n            rv = sscanf( Line, \"In file included from %[^:]:%u:\",\n                               FileName, &Row );\n            if ( rv == 2 )\n              {\n                ok = (echogets(Reason, echo) != NULL);\n              }\n            else\n#endif\n              { \n\t        if ((rv = sscanf( Line, \"%[^:]:%u: warning: %[^\\n]\",\n                                   FileName, &Row, Reason ))==3) {\n\t\t Severity = 'w';\n\t\t} else {\n                rv = sscanf( Line, \"%[^:]:%u: %[^\\n]\",\n                                   FileName, &Row, Reason );\n\t\t}\n                ok = ( rv == 3 );\n              }\n            Col = (dec_col ? 1 : 0 );\n            break;\n          case COMPILER_AIX:\n            rv = sscanf( Line, \"\\\"%[^\\\"]\\\", line %u.%u: %*s (%c) %[^\\n]\",\n                               FileName, &Row, &Col, &Severity, Reason );\n            ok = ( rv == 5 );\n            break;\n          case COMPILER_HPUX:\n            rv = sscanf( Line, \"cc: \\\"%[^\\\"]\\\", line %u: %c%*[^:]: %[^\\n]\",\n                               FileName, &Row, &Severity, Reason );\n            ok = ( rv == 4 );\n            Col = (dec_col ? 1 : 0 );\n            break;\n          case COMPILER_SOLARIS:\n            rv = sscanf( Line, \"\\\"%[^\\\"]\\\", line %u: warning: %[^\\n]\",\n                               FileName, &Row, Reason );\n            Severity = 'w';\n            ok = ( rv == 3 );\n            if ( rv != 3 )\n              {\n                rv = sscanf( Line, \"\\\"%[^\\\"]\\\", line %u: %[^\\n]\",\n                                   FileName, &Row, Reason );\n                Severity = 'e';\n                ok = ( rv == 3 );\n              }\n            Col = (dec_col ? 1 : 0 );\n            break;\n          case COMPILER_ATT:\n            rv   = sscanf( Line, \"%c \\\"%[^\\\"]\\\",L%u/C%u%*[^:]:%[^\\n]\",\n                                 &Severity, FileName, &Row, &Col, Reason );\n            ok = ( rv == 5 );\n\n            if (rv != 5)\n              { rv   = sscanf( Line, \"%c \\\"%[^\\\"]\\\",L%u/C%u: %[^\\n]\",\n                                     &Severity, FileName, &Row, &Col, Reason );\n                ok = ( rv == 5 );\n              }\n\n            if (rv != 5)\n              { rv  = sscanf( Line, \"%c \\\"%[^\\\"]\\\",L%u: %[^\\n]\",\n                                   &Severity, FileName, &Row, Reason );\n                ok = ( rv == 4 );\n                Col = (dec_col ? 1 : 0 );\n              }\n\n            stay = (echogets(Line2, echo) != NULL);\n            while ( stay && (Line2[0] == '|') )\n              { for (p=&Line2[2]; (*p) && (isspace(*p)); p++);\n                strcat( Reason, \": \" );\n                strcat( Reason, p );\n                Line2[0] = 0;\n                stay = (echogets(Line2, echo) != NULL);\n              }\n            prefetch = 1;\n            strcpy( Line, Line2 );\n            break;\n          case COMPILER_IRIX:\n            Col       = 1;\n            prefetch  = 0;\n            rv        = 0;\n            ok        = 0;\n            if ( !strncmp(Line, \"cfe: \", 5) )\n              { p = &Line[5];\n                Severity = tolower(*p);\n                p = strchr( &Line[5], ':' );\n                if (p == NULL)\n                  { ok = 0;\n                  }\n                 else\n                  { \n                    rv = sscanf( p+2, \"%[^:]: %u: %[^\\n]\",\n                                 FileName, &Row, Reason );\n                    if (rv != 3)\n                      rv = sscanf( p+2, \"%[^,], line %u: %[^\\n]\",\n                                   FileName, &Row, Reason );\n                    ok = ( rv == 3 );\n                  }\n\n                if (ok)\n                  { prefetch = 1;\n                    stay = (echogets(Line, echo) != NULL);\n                    if (Line[0] == ' ')\n                      stay = (echogets(Line2, echo) != NULL);\n                    if (  (Line2[0] == ' ') &&\n                          ( (Line2[1] == '-') || (Line2[1] == '^') )  )\n                      { Col = strlen(Line2)-1;\n                        prefetch = 0;\n                      }\n                     else\n                      { strcat( Line, \"\\n\" );\n                        strcat( Line, Line2 );\n                      }\n                  }\n              }\n            break;\n        }\n      if (dec_col) Col--;\n      if (dec_row) Row--;\n      if (!ok)\n        {\n          if ( Line[0] == 'g' )\n              p = &Line[1];\n          else\n              p = &Line[0];\n          ok = sscanf( p, \"make[%*d]: Entering directory `%[^']\",\n                       BasePath );\n          if (verbose)\n            printf( \"[%u]?%s\\n\", ok, Line );\n        }\n       else\n        {\n          for (p=Reason; (*p) && (isspace(*p)); p++);\n          if ( BasePath[CWDlen] == 0 )\n              printf( \"%s:%u:%u:%c:%s\\n\", FileName, Row, Col, Severity, p );\n          else\n            {\n              printf( \"%s/%s:%u:%u:%c:%s\\n\", &BasePath[CWDlen+1], FileName, Row, Col, Severity, p );\n            }\n        }\n      if (!prefetch)\n        stay = ( echogets(Line, echo) != NULL );\n    }\n  return 0;\n}\n\n"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.15.0, LLVM 12.0.0"}, "mutationScore": 5, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}